services:
  # PostgreSQL Database
  postgres:
    container_name: api-gateway-postgres
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-api_gateway}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - api-gateway-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    container_name: api-gateway-redis
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - api-gateway-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Backend
  backend:
    container_name: api-gateway-backend
    build:
      context: .
      dockerfile: ./packages/backend/Dockerfile
      target: production
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-api_gateway}?schema=public
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      ABILLS_DB_HOST: ${ABILLS_DB_HOST:-194.8.147.140}
      ABILLS_DB_USER: ${ABILLS_DB_USER:-abills}
      ABILLS_DB_PASSWORD: ${ABILLS_DB_PASSWORD:-abills}
      ABILLS_DB_NAME: ${ABILLS_DB_NAME:-abills}
      ABILLS_DB_DECODE_KEY: ${ABILLS_DB_DECODE_KEY:-test12345678901234567890}
      BILLING_API_URL: ${BILLING_API_URL:-https://billing.intelekt.cv.ua:9443}
      BILLING_API_KEY: ${BILLING_API_KEY}
      ADMIN_ACTION_IP: ${ADMIN_ACTION_IP:-3166694701}
      ADMIN_ACTION_AID: ${ADMIN_ACTION_AID:-333}
      # Telegram Bot API URLs
      TELEGRAM_API_OPTICOM: ${TELEGRAM_API_OPTICOM}
      TELEGRAM_API_VELES: ${TELEGRAM_API_VELES}
      TELEGRAM_API_OPENSVIT: ${TELEGRAM_API_OPENSVIT}
      TELEGRAM_API_INTELEKT: ${TELEGRAM_API_INTELEKT}
      # TurboSMS Configuration
      TURBOSMS_URL: ${TURBOSMS_URL:-https://api.turbosms.ua/message/send.json}
      TURBOSMS_TOKEN_OPTICOM: ${TURBOSMS_TOKEN_OPTICOM}
      TURBOSMS_TOKEN_VELES: ${TURBOSMS_TOKEN_VELES}
      TURBOSMS_TOKEN_OPENSVIT: ${TURBOSMS_TOKEN_OPENSVIT}
      TURBOSMS_TOKEN_INTELEKT: ${TURBOSMS_TOKEN_INTELEKT}
      # SMS Sender Names
      SMS_SENDER_OPTICOM: ${SMS_SENDER_OPTICOM:-OpticomPlus}
      SMS_SENDER_VELES: ${SMS_SENDER_VELES:-VelesISP}
      SMS_SENDER_OPENSVIT: ${SMS_SENDER_OPENSVIT:-Opensvit}
      SMS_SENDER_INTELEKT: ${SMS_SENDER_INTELEKT:-INTELEKT}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - api-gateway-network
    command: sh -c "npx prisma migrate deploy && node dist/main.js"

  # Next.js Admin Panel
  admin:
    container_name: api-gateway-admin
    build:
      context: .
      dockerfile: ./packages/admin/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://localhost:3000/api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: http://localhost:3000/api
    ports:
      - "3001:3001"
    depends_on:
      - backend
    networks:
      - api-gateway-network

  # Nginx Reverse Proxy
  nginx:
    container_name: api-gateway-nginx
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - admin
    networks:
      - api-gateway-network

  # pgAdmin - for database management
  pgadmin:
    container_name: api-gateway-pgadmin
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - api-gateway-network

networks:
  api-gateway-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

// Prisma Schema for API Gateway

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin Users
model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String    @map("password_hash")
  firstName    String?   @map("first_name")
  lastName     String?   @map("last_name")
  role         UserRole  @default(ADMIN)
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  tokens       ApiToken[]

  @@map("users")
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
}

// API Tokens for external clients
model ApiToken {
  id          String    @id @default(uuid())
  token       String    @unique @db.VarChar(255)
  tokenHash   String    @unique @map("token_hash") @db.VarChar(64)
  projectName String    @map("project_name")
  description String?   @db.Text
  scopes      String[]  @default([]) // Access scopes: ["billing", "userside", "analytics"]
  isActive    Boolean   @default(true) @map("is_active")
  rateLimit   Int       @default(100) @map("rate_limit") // requests per minute
  createdBy   String    @map("created_by")
  expiresAt   DateTime? @map("expires_at")
  lastUsedAt  DateTime? @map("last_used_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user       User         @relation(fields: [createdBy], references: [id])
  requests   ApiRequest[]
  rateLimits RateLimit[]

  @@index([tokenHash])
  @@index([isActive])
  @@index([createdBy])
  @@map("api_tokens")
}

// API Request Logs
model ApiRequest {
  id              String   @id @default(uuid())
  tokenId         String   @map("token_id")
  endpoint        String
  method          String   @db.VarChar(10)
  statusCode      Int      @map("status_code")
  responseTime    Int      @map("response_time") // in milliseconds
  ipAddress       String   @map("ip_address") @db.VarChar(45)
  userAgent       String?  @map("user_agent") @db.Text
  requestPayload  Json?    @map("request_payload")
  responsePayload Json?    @map("response_payload")
  errorMessage    String?  @map("error_message") @db.Text
  createdAt       DateTime @default(now()) @map("created_at")

  token           ApiToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId])
  @@index([createdAt])
  @@index([endpoint])
  @@index([statusCode])
  @@map("api_requests")
}

// Rate Limiting tracking
model RateLimit {
  id            String   @id @default(uuid())
  tokenId       String   @map("token_id")
  requestsCount Int      @default(0) @map("requests_count")
  windowStart   DateTime @map("window_start")
  resetAt       DateTime @map("reset_at")
  createdAt     DateTime @default(now()) @map("created_at")

  token         ApiToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([tokenId, windowStart])
  @@index([resetAt])
  @@index([tokenId])
  @@map("rate_limits")
}

// Analytics Summary (aggregated data)
model AnalyticsSummary {
  id              String   @id @default(uuid())
  date            DateTime @db.Date
  tokenId         String?  @map("token_id")
  endpoint        String?
  totalRequests   Int      @default(0) @map("total_requests")
  successRequests Int      @default(0) @map("success_requests")
  errorRequests   Int      @default(0) @map("error_requests")
  avgResponseTime Float    @map("avg_response_time")
  minResponseTime Int      @map("min_response_time")
  maxResponseTime Int      @map("max_response_time")
  createdAt       DateTime @default(now()) @map("created_at")

  @@unique([date, tokenId, endpoint])
  @@index([date])
  @@index([tokenId])
  @@map("analytics_summary")
}

// Credit History (tracking monthly credit usage)
model CreditHistory {
  id        String   @id @default(uuid())
  uid       Int
  login     String
  creditSum Float    @map("credit_sum")
  usedAt    DateTime @default(now()) @map("used_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([uid])
  @@index([login])
  @@index([usedAt])
  @@map("credit_history")
}

// Notification Logs (tracking sent messages)
model NotificationLog {
  id           String             @id @default(uuid())
  provider     String             // Opticom, Veles, Opensvit, Intelekt
  type         NotificationType   // TELEGRAM, SMS
  recipient    String             // phone number or chatId
  message      String             @db.Text
  status       NotificationStatus // PENDING, SENT, FAILED, FALLBACK
  sentVia      String?            // telegram or sms (actual delivery method)
  responseData Json?              // API response data
  errorMessage String?            @db.Text
  uid          Int?               // user uid if applicable
  metadata     Json?              // additional contextual data
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")

  @@index([provider])
  @@index([status])
  @@index([uid])
  @@index([createdAt])
  @@index([type])
  @@map("notification_logs")
}

enum NotificationType {
  TELEGRAM
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  FALLBACK
}

// Phone Change Verifications (код підтвердження для зміни телефону)
model PhoneChangeVerification {
  id               String   @id @default(uuid())
  uid              Int
  login            String
  oldPhone         String   @map("old_phone")
  newPhone         String   @map("new_phone")
  verificationCode String   @map("verification_code") @db.VarChar(6)
  provider         String   // Opticom, Veles, Opensvit, Intelekt
  expiresAt        DateTime @map("expires_at")
  createdAt        DateTime @default(now()) @map("created_at")

  @@index([uid])
  @@index([verificationCode])
  @@index([expiresAt])
  @@map("phone_change_verifications")
}

// Phone Login Verifications (OTP для входу за номером телефону)
model PhoneLoginVerification {
  id               String   @id @default(uuid())
  phoneNumber      String   @map("phone_number") // 380XXXXXXXXX формат
  provider         String   // Opticom, Veles, Opensvit, Intelekt
  verificationCode String   @map("verification_code") @db.VarChar(6)
  uid              Int?     // Знайдений користувач (null до верифікації)
  chatId           String?  @map("chat_id") // Telegram chat_id якщо знайдено
  attempts         Int      @default(1) // Лічильник спроб відправки
  lastAttemptAt    DateTime @default(now()) @map("last_attempt_at")
  expiresAt        DateTime @map("expires_at")
  createdAt        DateTime @default(now()) @map("created_at")

  @@index([phoneNumber])
  @@index([provider])
  @@index([phoneNumber, provider])
  @@index([verificationCode])
  @@index([expiresAt])
  @@index([lastAttemptAt])
  @@map("phone_login_verifications")
}

// Login Attempts (захист від брутфорсу паролів)
model LoginAttempt {
  id         String   @id @default(uuid())
  login      String   // Login користувача
  ip         String?  // IP адреса (якщо доступна)
  success    Boolean  // Успішна спроба чи ні
  failReason String?  @map("fail_reason") @db.Text // Причина помилки
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([login])
  @@index([login, createdAt])
  @@index([ip])
  @@index([ip, createdAt])
  @@index([success])
  @@map("login_attempts")
}

// Tariff Change History (історія зміни тарифних планів)
model TariffChangeHistory {
  id            String   @id @default(uuid())
  uid           Int      // User ID
  login         String   // User login
  oldTpId       Int      @map("old_tp_id") // Previous tariff plan ID
  oldTariffName String   @map("old_tariff_name") // Previous tariff name
  newTpId       Int      @map("new_tp_id") // New tariff plan ID
  newTariffName String   @map("new_tariff_name") // New tariff name
  internetId    Int      @map("internet_id") // internet_main.id
  changedAt     DateTime @default(now()) @map("changed_at")

  @@index([uid])
  @@index([uid, changedAt])
  @@index([changedAt])
  @@map("tariff_change_history")
}


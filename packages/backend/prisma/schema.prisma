// Prisma Schema for API Gateway

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin Users
model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String    @map("password_hash")
  firstName    String?   @map("first_name")
  lastName     String?   @map("last_name")
  role         UserRole  @default(ADMIN)
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  tokens              ApiToken[]
  auditLogs           TokenAuditLog[]
  ipRules             IpRule[]
  tokenRotations      TokenRotationHistory[]
  endpointRules       EndpointRule[]
  settings            AdminSettings?
  alertRules          AlertRule[]

  @@map("users")
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
}

// API Tokens for external clients
model ApiToken {
  id          String    @id @default(uuid())
  token       String    @unique @db.VarChar(255)
  tokenHash   String    @unique @map("token_hash") @db.VarChar(64)
  projectName String    @map("project_name")
  description String?   @db.Text
  scopes      String[]  @default([]) // Access scopes: ["billing", "userside", "analytics"]
  isActive    Boolean   @default(true) @map("is_active")
  rateLimit   Int       @default(100) @map("rate_limit") // requests per minute
  createdBy   String    @map("created_by")
  expiresAt   DateTime? @map("expires_at")
  lastUsedAt  DateTime? @map("last_used_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user              User                   @relation(fields: [createdBy], references: [id])
  requests          ApiRequest[]
  rateLimits        RateLimit[]
  rateLimitEvents   RateLimitEvent[]
  auditLogs         TokenAuditLog[]
  ipRules           IpRule[]
  securityEvents    SecurityEvent[]
  rotationHistory   TokenRotationHistory[]
  endpointRules     EndpointRule[]

  @@index([tokenHash])
  @@index([isActive])
  @@index([createdBy])
  @@map("api_tokens")
}

// API Request Logs
model ApiRequest {
  id              String   @id @default(uuid())
  tokenId         String   @map("token_id")
  endpoint        String
  method          String   @db.VarChar(10)
  statusCode      Int      @map("status_code")
  responseTime    Int      @map("response_time") // in milliseconds
  ipAddress       String   @map("ip_address") @db.VarChar(45)
  userAgent       String?  @map("user_agent") @db.Text
  requestPayload  Json?    @map("request_payload")
  responsePayload Json?    @map("response_payload")
  errorMessage    String?  @map("error_message") @db.Text
  createdAt       DateTime @default(now()) @map("created_at")

  token           ApiToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId])
  @@index([createdAt])
  @@index([endpoint])
  @@index([statusCode])
  @@map("api_requests")
}

// Rate Limiting tracking
model RateLimit {
  id            String   @id @default(uuid())
  tokenId       String   @map("token_id")
  requestsCount Int      @default(0) @map("requests_count")
  windowStart   DateTime @map("window_start")
  resetAt       DateTime @map("reset_at")
  createdAt     DateTime @default(now()) @map("created_at")

  token         ApiToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([tokenId, windowStart])
  @@index([resetAt])
  @@index([tokenId])
  @@map("rate_limits")
}

// Analytics Summary (aggregated data)
model AnalyticsSummary {
  id              String   @id @default(uuid())
  date            DateTime @db.Date
  tokenId         String?  @map("token_id")
  endpoint        String?
  totalRequests   Int      @default(0) @map("total_requests")
  successRequests Int      @default(0) @map("success_requests")
  errorRequests   Int      @default(0) @map("error_requests")
  avgResponseTime Float    @map("avg_response_time")
  minResponseTime Int      @map("min_response_time")
  maxResponseTime Int      @map("max_response_time")
  createdAt       DateTime @default(now()) @map("created_at")

  @@unique([date, tokenId, endpoint])
  @@index([date])
  @@index([tokenId])
  @@map("analytics_summary")
}

// Credit History (tracking monthly credit usage)
model CreditHistory {
  id        String   @id @default(uuid())
  uid       Int
  login     String
  creditSum Float    @map("credit_sum")
  usedAt    DateTime @default(now()) @map("used_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([uid])
  @@index([login])
  @@index([usedAt])
  @@map("credit_history")
}

// Notification Logs (tracking sent messages)
model NotificationLog {
  id           String             @id @default(uuid())
  provider     String             // Opticom, Veles, Opensvit, Intelekt
  type         NotificationType   // TELEGRAM, SMS
  recipient    String             // phone number or chatId
  message      String             @db.Text
  status       NotificationStatus // PENDING, SENT, FAILED, FALLBACK
  sentVia      String?            // telegram or sms (actual delivery method)
  responseData Json?              // API response data
  errorMessage String?            @db.Text
  uid          Int?               // user uid if applicable
  metadata     Json?              // additional contextual data
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")

  @@index([provider])
  @@index([status])
  @@index([uid])
  @@index([createdAt])
  @@index([type])
  @@map("notification_logs")
}

enum NotificationType {
  TELEGRAM
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  FALLBACK
}

// Phone Change Verifications (код підтвердження для зміни телефону)
model PhoneChangeVerification {
  id               String   @id @default(uuid())
  uid              Int
  login            String
  oldPhone         String   @map("old_phone")
  newPhone         String   @map("new_phone")
  verificationCode String   @map("verification_code") @db.VarChar(6)
  provider         String   // Opticom, Veles, Opensvit, Intelekt
  expiresAt        DateTime @map("expires_at")
  createdAt        DateTime @default(now()) @map("created_at")

  @@index([uid])
  @@index([verificationCode])
  @@index([expiresAt])
  @@map("phone_change_verifications")
}

// Phone Login Verifications (OTP для входу за номером телефону)
model PhoneLoginVerification {
  id               String   @id @default(uuid())
  phoneNumber      String   @map("phone_number") // 380XXXXXXXXX формат
  provider         String   // Opticom, Veles, Opensvit, Intelekt
  verificationCode String   @map("verification_code") @db.VarChar(6)
  uid              Int?     // Знайдений користувач (null до верифікації)
  chatId           String?  @map("chat_id") // Telegram chat_id якщо знайдено
  attempts         Int      @default(1) // Лічильник спроб відправки
  lastAttemptAt    DateTime @default(now()) @map("last_attempt_at")
  expiresAt        DateTime @map("expires_at")
  createdAt        DateTime @default(now()) @map("created_at")

  @@index([phoneNumber])
  @@index([provider])
  @@index([phoneNumber, provider])
  @@index([verificationCode])
  @@index([expiresAt])
  @@index([lastAttemptAt])
  @@map("phone_login_verifications")
}

// Login Attempts (захист від брутфорсу паролів)
model LoginAttempt {
  id         String   @id @default(uuid())
  login      String   // Login користувача
  ip         String?  // IP адреса (якщо доступна)
  success    Boolean  // Успішна спроба чи ні
  failReason String?  @map("fail_reason") @db.Text // Причина помилки
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([login])
  @@index([login, createdAt])
  @@index([ip])
  @@index([ip, createdAt])
  @@index([success])
  @@map("login_attempts")
}

// Tariff Change History (історія зміни тарифних планів)
model TariffChangeHistory {
  id            String   @id @default(uuid())
  uid           Int      // User ID
  login         String   // User login
  oldTpId       Int      @map("old_tp_id") // Previous tariff plan ID
  oldTariffName String   @map("old_tariff_name") // Previous tariff name
  newTpId       Int      @map("new_tp_id") // New tariff plan ID
  newTariffName String   @map("new_tariff_name") // New tariff name
  internetId    Int      @map("internet_id") // internet_main.id
  changedAt     DateTime @default(now()) @map("changed_at")

  @@index([uid])
  @@index([uid, changedAt])
  @@index([changedAt])
  @@map("tariff_change_history")
}

// Rate Limit Events (логування перевищення rate limits)
model RateLimitEvent {
  id            String   @id @default(uuid())
  tokenId       String   @map("token_id")
  endpoint      String
  method        String   @db.VarChar(10)
  requestsCount Int      @map("requests_count")
  limitValue    Int      @map("limit_value")
  ipAddress     String   @map("ip_address") @db.VarChar(45)
  userAgent     String?  @map("user_agent") @db.Text
  blockedAt     DateTime @default(now()) @map("blocked_at")

  token         ApiToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId])
  @@index([blockedAt])
  @@index([endpoint])
  @@map("rate_limit_events")
}

// Token Audit Log (аудит змін токенів)
model TokenAuditLog {
  id        String   @id @default(uuid())
  tokenId   String   @map("token_id")
  adminId   String   @map("admin_id")
  action    String   // 'created', 'updated', 'deleted', 'regenerated', 'deactivated', 'activated'
  changes   Json?    // Що саме змінилось (old value -> new value)
  ipAddress String   @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  token     ApiToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  admin     User     @relation(fields: [adminId], references: [id])

  @@index([tokenId])
  @@index([adminId])
  @@index([createdAt])
  @@index([action])
  @@map("token_audit_log")
}

// IP Rules for Token Security (whitelist/blacklist)
model IpRule {
  id          String     @id @default(uuid())
  tokenId     String     @map("token_id")
  type        IpRuleType // WHITELIST or BLACKLIST
  ipAddress   String     @map("ip_address") @db.VarChar(45)
  description String?    @db.Text
  createdBy   String     @map("created_by")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  token       ApiToken   @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  creator     User       @relation(fields: [createdBy], references: [id])

  @@unique([tokenId, ipAddress])
  @@index([tokenId])
  @@index([ipAddress])
  @@index([type])
  @@map("ip_rules")
}

enum IpRuleType {
  WHITELIST
  BLACKLIST
}

// Security Events (блокування, підозріла активність)
model SecurityEvent {
  id         String            @id @default(uuid())
  tokenId    String?           @map("token_id")
  eventType  SecurityEventType // BLOCKED_IP, FAILED_AUTH, SUSPICIOUS_ACTIVITY
  ipAddress  String            @map("ip_address") @db.VarChar(45)
  endpoint   String?
  method     String?           @db.VarChar(10)
  statusCode Int?              @map("status_code")
  details    Json?             // Додаткова інформація про подію
  userAgent  String?           @map("user_agent") @db.Text
  createdAt  DateTime          @default(now()) @map("created_at")

  token      ApiToken?         @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId])
  @@index([eventType])
  @@index([ipAddress])
  @@index([createdAt])
  @@map("security_events")
}

enum SecurityEventType {
  BLOCKED_IP
  FAILED_AUTH
  SUSPICIOUS_ACTIVITY
  RATE_LIMIT_ABUSE
}

// Token Rotation History (історія перегенерації токенів)
model TokenRotationHistory {
  id           String   @id @default(uuid())
  tokenId      String   @map("token_id")
  oldTokenHash String   @map("old_token_hash") @db.VarChar(64)
  reason       String?  @db.Text
  rotatedBy    String   @map("rotated_by")
  ipAddress    String   @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent") @db.Text
  rotatedAt    DateTime @default(now()) @map("rotated_at")

  token        ApiToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  rotator      User     @relation(fields: [rotatedBy], references: [id])

  @@index([tokenId])
  @@index([rotatedAt])
  @@map("token_rotation_history")
}

// Endpoint Access Rules (блокування доступу до конкретних endpoints)
model EndpointRule {
  id          String   @id @default(uuid())
  tokenId     String   @map("token_id")
  endpoint    String   @db.VarChar(500) // Точний шлях, наприклад "/api/billing/users/140278/payments"
  method      String?  @db.VarChar(10)  // HTTP метод (GET, POST, etc.) або null для всіх методів
  description String?  @db.Text
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  token       ApiToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  creator     User     @relation(fields: [createdBy], references: [id])

  @@unique([tokenId, endpoint, method])
  @@index([tokenId])
  @@index([endpoint])
  @@map("endpoint_rules")
}

// Admin Settings (налаштування адміністратора для Telegram та інше)
model AdminSettings {
  id                  String   @id @default(uuid())
  userId              String   @map("user_id") @unique
  telegramBotToken    String?  @map("telegram_bot_token") @db.Text
  telegramChatId      String?  @map("telegram_chat_id")
  alertsEnabled       Boolean  @default(false) @map("alerts_enabled")
  emailNotifications  Boolean  @default(false) @map("email_notifications")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_settings")
}

// Alert Rules (правила для автоматичних алертів)
model AlertRule {
  id                String     @id @default(uuid())
  userId            String     @map("user_id")
  name              String
  description       String?    @db.Text
  type              AlertType
  metric            String     // error_rate, cpu_usage, memory_usage, etc.
  threshold         Float      // e.g., 5.0 for 5% error rate
  comparisonOp      String     @map("comparison_op") @db.VarChar(5) // >, <, >=, <=, ==
  windowMinutes     Int        @map("window_minutes") @default(5)
  severity          Severity   @default(WARNING)
  cooldownMinutes   Int        @map("cooldown_minutes") @default(10)
  notifyTelegram    Boolean    @default(true) @map("notify_telegram")
  notifyEmail       Boolean    @default(false) @map("notify_email")
  notifyWebhook     Boolean    @default(false) @map("notify_webhook")
  webhookUrl        String?    @map("webhook_url") @db.Text
  notifyOnRecovery  Boolean    @default(true) @map("notify_on_recovery")
  isActive          Boolean    @default(true) @map("is_active")
  lastTriggered     DateTime?  @map("last_triggered")
  lastChecked       DateTime?  @map("last_checked")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")

  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  alerts            Alert[]

  @@index([userId])
  @@index([isActive])
  @@index([type])
  @@index([metric])
  @@map("alert_rules")
}

enum AlertType {
  // Performance
  ERROR_RATE_HIGH
  RESPONSE_TIME_SLOW
  REQUESTS_SPIKE

  // Resources
  CPU_HIGH
  MEMORY_HIGH
  DISK_FULL

  // Services
  DATABASE_SLOW
  DATABASE_CONNECTIONS_HIGH
  REDIS_SLOW
  REDIS_MEMORY_HIGH

  // Application
  EVENT_LOOP_BLOCKED
  RATE_LIMIT_EXCEEDED
  SERVICE_DOWN

  // ABills
  ABILLS_UNREACHABLE
  ABILLS_SYNC_FAILED

  // Other
  ANOMALY_DETECTED
  CUSTOM
}

// Alert History (історія відправлених алертів)
model Alert {
  id                String    @id @default(uuid())
  ruleId            String    @map("rule_id")
  ruleName          String    @map("rule_name")
  type              AlertType
  severity          Severity
  message           String    @db.Text
  metric            String
  currentValue      Float     @map("current_value")
  threshold         Float
  metadata          Json?     // Additional context (affected endpoints, duration, etc.)
  sentAt            DateTime  @default(now()) @map("sent_at")
  channelTelegram   Boolean   @default(false) @map("channel_telegram")
  channelEmail      Boolean   @default(false) @map("channel_email")
  channelWebhook    Boolean   @default(false) @map("channel_webhook")
  resolved          Boolean   @default(false)
  resolvedAt        DateTime? @map("resolved_at")
  recoveryMessage   String?   @map("recovery_message") @db.Text
  acknowledgedBy    String?   @map("acknowledged_by")
  acknowledgedAt    DateTime? @map("acknowledged_at")

  rule              AlertRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([ruleId])
  @@index([sentAt])
  @@index([severity])
  @@index([resolved])
  @@index([type])
  @@map("alerts")
}

enum Severity {
  INFO
  WARNING
  CRITICAL
  EMERGENCY
}

